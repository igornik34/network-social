// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  email       String    @unique
  password    String
  name        String?
  avatarUrl   String?
  dateOfBirth DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  bio         String?
  location    String?

  posts     Post[]
  likes     Like[]
  comments  Comment[]
  followers Follows[] @relation("following")
  following Follows[] @relation("follower")

  dialogs  Dialog[]
  online   Boolean?
  lastSeen DateTime?
  Message  Message[]
}

model Dialog {
  id            String    @id @default(uuid())
  participants  User[]
  messages      Message[]
  lastMessageId String?
  lastMessage   Message?  @relation("lastMessage", fields: [lastMessageId], references: [id])

  @@unique([id, lastMessageId])
}

model Message {
  id                String   @id @default(uuid())
  text              String
  senderId          String
  sender            User     @relation(fields: [senderId], references: [id])
  dialogId          String
  dialog            Dialog   @relation(fields: [dialogId], references: [id])
  dialogLastMessage Dialog[] @relation("lastMessage")
  createdAt         DateTime @default(now())
}

model Follows {
  id          String @id @default(uuid())
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String
}

model Post {
  id        String    @id @default(uuid())
  content   String
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  likes     Like[]
  comments  Comment[]
  createdAt DateTime  @default(now())
}

model Like {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  post   Post   @relation(fields: [postId], references: [id])
  postId String
}

model Comment {
  id      String @id @default(uuid())
  content String
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  Post    Post   @relation(fields: [postId], references: [id])
  postId  String
}
